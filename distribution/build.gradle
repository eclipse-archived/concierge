import org.apache.tools.ant.filters.*

apply plugin: 'distribution'

task markdownCopyLevel1(type: Copy) {
  from '../docs'
  into 'build/gen-html'
  include('*.md')
  rename { it - '.md' + '.html'}
  filter(ConcatFilter, prepend: file('src/config/strapdown-pre.txt'))
  filter(ConcatFilter, append: file('src/config/strapdown-post-dirlevel1.txt'))
}

task markdownCopyLevel2(type: Copy) {
  from '../docs'
  into 'build/gen-html'
  include('*/*.md')
  rename { it - '.md' + '.html'}
  filter(ConcatFilter, prepend: file('src/config/strapdown-pre.txt'))
  filter(ConcatFilter, append: file('src/config/strapdown-post-dirlevel2.txt'))
}

distributions {
	main {
		baseName 'concierge-incubation'
		contents {
			into('framework') {
                from { project(':framework:org.eclipse.concierge').jar }
                from { project(':framework:org.eclipse.concierge').strippedJar }
                from { project(':framework:org.eclipse.concierge.extension.permission').jar }
                from { project(':framework:org.eclipse.concierge.profile.javase7').jar }
			}
			into('bundles') {
                from { project(':bundles:org.eclipse.concierge.service.permission').jar }
                from { project(':bundles:org.eclipse.concierge.service.packageadmin').jar }
                from { project(':bundles:org.eclipse.concierge.service.eventadmin').jar }
                from { project(':bundles:org.eclipse.concierge.service.startlevel').jar }
                from { project(':bundles:org.eclipse.concierge.service.xmlparser').jar }
                from { project(':bundles:org.eclipse.concierge.service.clusterinfo').jar }
                from { project(':bundles:org.eclipse.concierge.shell').jar }
                from { project(':bundles:org.eclipse.concierge.service.rest').jar }
                from { project(':bundles:org.eclipse.concierge.service.rest.client').jar }
            }
			into('docs') {
                from ('build/gen-html')
			}
		}
	}
}

distZip.dependsOn markdownCopyLevel1, markdownCopyLevel2
distTar.dependsOn markdownCopyLevel1, markdownCopyLevel2

// website
// copy html and .md files into a directory
// will add a timestamp when files have been generated to check version in PROD

task copyWebsiteStatics(type: Copy) {
	from "../website"
	into "build/website"
}

task copyWebsiteMarkdown(type: Copy) {
	from "../docs"
	into "build/website/docs"
}

task generateWebsite {
    dependsOn copyWebsiteStatics, copyWebsiteMarkdown
	doLast {
		// append comment to selected files
		def git = org.ajoberstar.grgit.Grgit.open(dir: "..")
		def revision = git.head().id
		def now = new Date()

		def htmlComment = "\n<!-- Website generated at $now from commit $revision -->"
		def tree = fileTree(dir: "build/website", include: "**/*.php")
		tree.each { file -> file.append(htmlComment) }
		
		// https://stackoverflow.com/questions/4823468/comments-in-markdown
		def mdComment = "\n[comment]: # (Website generated at $now from commit $revision)"
		// only main php files, not includes
		tree = fileTree(dir: "build/website/docs", include: "*.md")
		tree.each { file -> file.append(mdComment) }
	}
}
