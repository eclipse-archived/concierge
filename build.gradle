// Build script for Concierge

// sample usages:
// Cleanup:							   ./gradlew clean
// Build and run tests:				   ./gradlew test
// Make complete fresh build:			 ./gradlew clean build publish assembleDist installDist
// Build and publish to local Maven repo: ./gradlew clean build publishToMavenLocal

buildscript {
	repositories {
		maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
		jcenter()
	}
	dependencies {
		classpath "org.akhikhl.wuff:wuff-plugin:0.0.13-SNAPSHOT"
	}
}

plugins {
	// TODO jhi create p2 repo with this tool?
	// see: https://github.com/stempler/bnd-platform
	// id 'org.standardout.bnd-platform' version '1.2.0'
	// see: https://github.com/akhikhl/wuff-sandbox/tree/master/007_repository
	// id: ''

	// see: https://github.com/netzwerg/gradle-release-plugin
	id 'ch.netzwerg.release' version '1.1.0'
}

// only include in top level project
// apply plugin: 'org.standardout.bnd-platform'
// tmarkwardt: disabled - download error on http://mirror.netcologne.de/eclipse//technology/epp/downloads/release/luna/SR2/eclipse-jee-luna-SR2-win32-x86_64.zip
//apply plugin: 'org.akhikhl.wuff.eclipse-repository'
//apply plugin: 'ch.netzwerg.release'


// global variables
project.ext {
 	buildQualifier = getBuildQualifier()
 	buildVersion = getBuildVersion()
}

allprojects {
	apply plugin: 'distribution'

	group = 'org.eclipse.concierge'
	buildQualifier = rootProject.buildQualifier
	buildVersion = rootProject.buildVersion
	version = rootProject.buildVersion

	// create all TARs as tar.gz compressed
	tasks.withType(Tar){
		compression = Compression.GZIP
		extension = 'tar.gz'
	}
}

// configure all java projects
// ignore distribution and intermediate projects
configure(subprojects.findAll {! (it.name in ['distribution', 'bundles', 'framework', 'tests']) }) {
	apply plugin: 'java'
	apply plugin: 'maven-publish'

	clean {
		delete "bin"
		delete "storage"
		delete "target"
	}

	sourceCompatibility = 1.5
	targetCompatibility = 1.5
	
	// TODO jhi align directory structure to Maven based one
	sourceSets {
		main {
			java {
				srcDir 'src'
 			}
			resources {
				srcDirs = [ ".", "../../distribution/src/config" ]
				include "META-INF/services/**", "META-INF/micro-services", "about.html", "about_files/**"
			}
		}
		test {
			java {
				srcDir 'test'
			}
		}
	}

	compileJava {
		// disable warning: bootstrap class path not set in conjunction with -source 1.5
		options.compilerArgs << '-Xlint:-options'
		// TODO jhi fix warnings, then enable
		// options.compilerArgs << '-Xlint:unchecked'
		// TODO jhi fix deprecated warnings, then enable
		// options.compilerArgs << '-Xlint:deprecation'
	}

	compileTestJava {
		// disable warning: bootstrap class path not set in conjunction with -source 1.5
		options.compilerArgs << '-Xlint:-options'
	}

	dependencies {
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
	}

	jar {
		manifest {
			from('META-INF/MANIFEST.MF') {
				eachEntry { details ->
					if (details.key == 'Bundle-Version') {
						details.value = details.value.replace ("qualifier", rootProject.buildQualifier)
						// for debugging
						// println details.key + "=" + details.value
					}
				}
			}
		}
	}

	// name jar file to given bundle symbolic name and version, NOT to project version
	// as project version is for overall packaging
	// we maintain the bundle version manually (or using bndtools)
	// for debugging
	// println ("configure: jar=" + jar)
	jar.archiveName = jar.manifest.getEffectiveManifest().getAttributes().get("Bundle-SymbolicName") \
						+ "-" + jar.manifest.getEffectiveManifest().getAttributes().get("Bundle-Version") \
						+ ".jar"

	repositories {
		mavenCentral()
   	}

	publishing {
		repositories {
			maven {
			// TODO remove completely
				// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=467163
				// https://repo.eclipse.org/content/repositories/concierge-snapshots/
				// https://repo.eclipse.org/content/repositories/concierge-releases/
				// println ("project.version=" + project.version)
				if(project.version.contains('SNAPSHOT')) {
				url "../../distribution/build/repo/maven/snapshots"
 				} else {
				url "../../distribution/build/repo/maven/releases"
		  		}
				// println ("url=" + url)
			}
		}
	}
}


project(':framework:org.eclipse.concierge.extension.permission') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':framework:org.eclipse.concierge.profile.javase7') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.service.permission') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.service.packageadmin') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.service.eventadmin') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.service.startlevel') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.service.xmlparser') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':bundles:org.eclipse.concierge.shell') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}
project(':tests:org.eclipse.concierge.tests.integration') {
	dependencies {
		compile project(':framework:org.eclipse.concierge')
	}
}

// release management
release {
  dependsOn distZip // 'distZip' could e.g be used in combination with the 'application' plugin
  push = false // 'true' would e.g. be useful when triggering the release task on a CI server
  versionSuffix = '.SNAPSHOT' // '.DEV' or '' (empty) could be useful alternatives
// TODO  
//  versionSuffix = qualifier // '.DEV' or '' (empty) could be useful alternatives
}


// task to create a gradle wrapper with used gradle version
task wrapper(type: Wrapper) {
	gradleVersion = '2.8'
	jarFile = '.gradle-wrapper/gradle-wrapper.jar'
}

// helper methods

// qualifier can be used to replace in Bundle-Version
// for release versions (RCn, Mn) this is the qualifier
// otherwise use the build time for the final build
def getBuildQualifier() {
	String ver = project.version
	String q
	String now = buildTime()
	if(ver.endsWith('.SNAPSHOT')) {
		q = ver.substring(ver.indexOf("SNAPSHOT"),ver.length()) + "-" + now
	} else if(ver.substring(0, ver.length()-1).endsWith('.RC')) {
		// for RC versions: use RCn as qualifier for bundle versions
		q = ver.substring(ver.indexOf("RC"),ver.length()) + "-" + now
	} else if(ver.substring(0, ver.length()-1).endsWith('.M')) {
		// for Milestone versions: use Mn as qualifier for bundle versions
		q = ver.substring(ver.indexOf("M"),ver.length()) + "-" + now
	} else {
		// final build
		q = now
	}
	// for debugging
	// println ("getBuildQualifier: " + q)
	return q
}


// project.version will be read from version.txt
// must be called as function as not initialized in all phases
// in case of SNAPSHOT the qualifier yet contains the SNAPSHOT prefix 
def getBuildVersion() {
	String ver = project.version
	String buildVersion
	if(ver.endsWith('.SNAPSHOT')) {
		buildVersion = ver.replace (".SNAPSHOT", "." + rootProject.buildQualifier)
	} else {
		buildVersion = ver
	}
	// for debugging
	// println ("getBuildVersion: " + buildVersion)
	return buildVersion
}

def buildTime() {
   	def date = new Date()
   	def formattedDate = date.format('yyyyMMddHHmmss')
   	// for debugging: add "SSS" to date to get ms
   	// def formattedDate = date.format('yyyyMMddHHmmssSSS')
	// println ("buildTime: " + formattedDate)
   	return formattedDate
}
